generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  orders    Order[]
  addresses Address[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String?
  price       Int       // price in cents
  images      String[]
  brand       String?
  color       String?
  size        String?
  categoryId  String?   @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Back-relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?      @db.ObjectId
  user       User?        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  total      Int
  addressId  String?      @db.ObjectId
  address    Address?     @relation(fields: [addressId], references: [id])
  status     String       @default("pending")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  state     String?
  postal    String?
  country   String
  // Back-relation for orders
  orders    Order[]
}
